#+title: What Is That

The following is some examples of code you might see "in the wild".

Use CTRL-f and search this page to find things easier.

* Contents :toc:
- [[#section-1][Section 1]]
  - [[#challenge-0---argument-main][Challenge 0 - Argument main]]
  - [[#challenge-1---direct-brace-initialization][Challenge 1 - Direct (Brace) Initialization]]

* Section 1
** Challenge 0 - Argument main

main that can take arguments,
=argc= is the number of aruments
=argv= is the arguments
0th argument is the program filename
=char*= is a c-string (aka a list of characters)
=argv[]= means the variable argv is a list
so =char* argv[]= is a list of a list of characters

the =*= is a /pointer/, which just means it is a variable that points to some location in memory, as opposed to a specific value

#+begin_src C++
int main(int argc, char *argv[]) {

    return 0;
}
#+end_src

** Challenge 1 - Direct (Brace) Initialization

=== /copies/ the value =1= into the variable =number=.
={}= initializes =another= with the value =2=.
essentially copy assignment does two operations (initialize and assign), brace initialization does one (initialize with value).

This is my preferred way of initializing variables, it might look awkward now but, as you learn about more data types, it is the most common.

Brace initialization is also more string when dealing with decimal numbers:
eg. it will not automatically convert a double to an integer on assignment.

=int num {5.5}= will error, unless you manually cast 5.5 to an int (ie. =static_cast<int>(5.5)=).

#+begin_src C++
int main() {
    int number = 1;  // copy initialization
    int another {2}; // direct brace initialization

    return 0;
}
#+end_src
